#include <stdio.h>

void printArray(int arr[], int size, int pass) {
    printf("Pass %d: ", pass);
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temp arrays
    int L[n1], R[n2];

    // Copy data to temp arrays
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    // Merge temp arrays back into arr[left..right]
    i = 0; j = 0; k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    // Copy remaining elements
    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right, int size, int *pass) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Recursively sort first and second halves
        mergeSort(arr, left, mid, size, pass);
        mergeSort(arr, mid + 1, right, size, pass);

        merge(arr, left, mid, right);

        (*pass)++;
        printArray(arr, size, *pass); // Print array after each merge
    }
}

int main() {
    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int size = sizeof(arr) / sizeof(arr[0]);
    int pass = 0;

    printf("Original array:\n");
    printArray(arr, size, pass);

    mergeSort(arr, 0, size - 1, size, &pass);

    printf("\nSorted array:\n");
    printArray(arr, size, ++pass);

    return 0;
}
